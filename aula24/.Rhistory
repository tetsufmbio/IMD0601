#Criando um vetor com os valores de p
p<-1:1000/1000
p
# Criando um vetor que armazenará os valores log da verossimilhança
lik<-vector(length=1000)
#Entrando com os dados
n1<-134 # nAA
n2<-266 # nAa
n3<-100 # naa
#Dado os dados, avaliar a verossimilhança para cada valor de p
for(i in 1:1000){
lik[i]<-2*n1*log(p[i])+n2*log(2*p[i]*(1-p[i]))+2*n3*log(1-p[i])
}
# Utilizando a função which para determinar o valor máximo da verossimilhança
which(lik==max(lik))
# Valor máximo da verossimilhança encontrado
lik[534]
# Estimativa da máxima verossimilhança para p
p[534]
# Plotar o resultado
plot(p,lik,xlab="p",ylab="log likelihood", main="MLE estimation for p")
abline(v=p[534],lty=2)
legend(x=0.54,y=-2000,legend="MLE p=0.534")
A<-750
B<-250
AB<-75
O<-925
p<-1:1000/1000
maxLik <- NA
maxA <- NA
maxB <- NA
#Dado os dados, avaliar a verossimilhança para cada valor de p
for(i in 1:1000){
for(j in 1:1000){
a <- p[i]
b <- p[j]
o <- 1 - a - b
if(o >= 0){
lik<-A*log(a^2+2*a*o)+B*log(b^2+2*b*o)+AB*log(2*a*b)+2*O*log(o)
if(is.na(maxLik) || lik > maxLik){
maxLik <- lik
maxA <- a
maxB <- b
}
}
}
}
maxA
maxB
1-maxA-maxB
maxLik
# 20 amostras aleatórias de uma distribuição normal padrão
x<-rnorm(20,0,1)
# Calcular média e desvio padrão
xBar<-mean(x)
s <- sd(x)
x
se<- s/(20^.5)
xBar
se
# Distribuição da média de uma amostragem pequena pode
# ser modelada utilizando a distribuição t com n-1 grau
# de liberdade (pois precisamos estimar o desvio padrão).
# Considerando alfa=0.05 e distribuindo o alfa nas duas
# extremidades da distribuição:
test<-qt(0.975,19)
test
# Calculando as margens do IC95:
clLower<-xBar-se*test
clLower
clUpper<-xBar+se*test
clUpper
xBar
# criando dados irregulares
x<-rnorm(100,3,4)
y<-rnorm(100,18,3)
all<-c(x,y)
hist(all,nclass=20)
n<-length(all)
nsample=1000
n
n<-length(all)
nsample=1000
# criar matriz que conterá as amostragens do bootstrap
# cada linha representa uma amostragem do bootstrap;
# cada coluna representa a posição das amostras em cada amostragem.
bootsamples<-matrix(nrow=nsample,ncol=n)
# realizar a amostragem do bootstrap.
for(i in 1:nsample){
bootsamples[i,]<-sample(all,n,replace=T)
}
bootsamples
# criar vetor que armazenará as medianas
bootmedstar<-vector(length=nsample)
bootmedstar
# calcular a mediana das amostras do bootstrap
for(i in 1:nsample){
bootmedstar[i]<-median(bootsamples[i,])
}
bootmedstar
# calcular o desvio padrão das medianas
sd(bootmedstar)
# verificar a distribuição das medianas
hist(bootmedstar,nclass=20,xlab="median",main="Dist. of bootstrap sample medians")

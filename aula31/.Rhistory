# média=45 e desvio padrão=12?
pop <- rnorm(1000, 45, 12)
hist(pop)
k <- 6
somaqd <- vector(length=1000)
for (i in 1:1000){
sind <- sample(c(1:1000),k)
sample <- pop[sind]
sample <- sample - mean(pop)
sample <- sample/(sd(sample)/k^0.5)
somaqd[i] <- sum(sample*sample)
}
hist(somaqd, prob=T)
x <- seq(0,30,0.1)
points(x, dchisq(x,k))
for (i in 1:1000){
sind <- sample(c(1:1000),k)
sample <- pop[sind]
sample <- sample - mean(pop)
sample <- sample/(sd(pop))
somaqd[i] <- sum(sample*sample)
}
hist(somaqd, prob=T)
x <- seq(0,30,0.1)
points(x, dchisq(x,k))
# Consigo gerar uma distribuição qui-quadrado a
# partir de populações que não seguem uma distribuição
# normal?
pop <- runif(1000,0,100)
k <- 6
somaqd <- vector(length=1000)
for (i in 1:1000){
sind <- sample(c(1:1000),k)
sample <- pop[sind]
sample <- sample - mean(pop)
sample <- sample/(sd(pop))
somaqd[i] <- sum(sample*sample)
}
hist(somaqd, prob=T,nclass=40)
x <- seq(0,200,0.1)
points(x, dchisq(x,k))
x
data1 <- rnorm(10)
data2 <- rnorm(10,6,3)
var.test(data1,data2)
var.test(data1,data2)
res <- var.test(data1,data2)
res
View(res)
var(data1)/var(data2)
print(var(data1)/var(data2))
varres <- var(data1)/var(data2)
varres
data2 <- rnorm(20,6,3)
var.test(data1,data2)
res <- var.test(data1,data2)
View(res)
varres <- var(data1)/var(data2)
pop <- rnorm(1000, 45, 12)
hist(pop)
k <- 6
somaqd <- vector(length=1000)
for (i in 1:1000){
sind <- sample(c(1:1000),k)
sample <- pop[sind]
varsample <- var(sample)
somaqd[i] <- ((k - 1)*var(sample))/var(pop)
}
hist(somaqd, prob=T)
x <- seq(0,30,0.1)
points(x, dchisq(x,k))
points(x, dchisq(x,k-1))
sample
view(sample)
View(sample)
?rnorm
?chisq.test
csq <- ((6-1)*sd(sample2))/144
# Verifique se os dados da amostra abaixo possui uma
# variância igua a 144
sample2 <- c(53.43137,44.47348,54.96736,52.95158,22.39179,61.26472)
csq <- ((6-1)*sd(sample2))/144
csq <- ((6-1)*var(sample2))/144
?qchisq
qchisq(0.05,5)
thr <- qchisq(0.05,5)
thr <- qchisq(c(0.95),5)
thr <- qchisq(c(2.75,0.97.5),5)
thr <- qchisq(c(2.75,0.975),5)
thr <- qchisq(c(0.075,0.975),5)
thr <- qchisq(c(0.0275,0.975),5)
x <- seq(0,30,0.1)
points(x, dchisq(x,6-1))
pop <- rnorm(1000, 45, 12)
hist(pop)
m <- 6
n <- 2
f <- vector(length=1000)
for (i in 1:1000){
sind <- sample(c(1:1000),m)
sample1 <- pop[sind]
sind <- sample(c(1:1000),2)
sample2 <- pop[sind]
f[i] <- sd(sample1)/sd(sample2)
}
hist(f, prob=T)
hist(f, prob=T, nclass=30)
hist(f, prob=T, nclass=50)
for (i in 1:1000){
sind <- sample(c(1:1000),m)
sample1 <- pop[sind]
sind <- sample(c(1:1000),n)
sample2 <- pop[sind]
f[i] <- sd(sample1)/sd(sample2)
}
hist(f, prob=T, nclass=50)
n <- 6
f <- vector(length=1000)
for (i in 1:1000){
sind <- sample(c(1:1000),m)
sample1 <- pop[sind]
sind <- sample(c(1:1000),n)
sample2 <- pop[sind]
f[i] <- sd(sample1)/sd(sample2)
}
hist(f, prob=T, nclass=50)
x <- seq(0,30,0.1)
points(x, df(x,m-1,n-1))
points(x, df(x,m,n))
m <- 6
n <- 6
f <- vector(length=1000)
for (i in 1:1000){
sind <- sample(c(1:1000),m)
sample1 <- pop[sind]
sind <- sample(c(1:1000),n)
sample2 <- pop[sind]
f[i] <- sd(sample1)/sd(sample2)
}
hist(f, prob=T, nclass=50)
x <- seq(0,30,0.1)
points(x, df(x,m,n))
pop <- rnorm(1000)
hist(pop)
m <- 6
n <- 6
f <- vector(length=1000)
for (i in 1:1000){
sind <- sample(c(1:1000),m)
sample1 <- pop[sind]
sind <- sample(c(1:1000),n)
sample2 <- pop[sind]
f[i] <- sd(sample1)/sd(sample2)
}
hist(f, prob=T, nclass=50)
x <- seq(0,30,0.1)
points(x, df(x,m,n))
points(x, df(x,m-1,n-1))
for (i in 1:1000){
sind <- sample(c(1:1000),m)
sample1 <- pop[sind]
sind <- sample(c(1:1000),n)
sample2 <- pop[sind]
f[i] <- var(sample1)/var(sample2)
}
hist(f, prob=T, nclass=50)
x <- seq(0,30,0.1)
points(x, df(x,m-1,n-1))
n <- 1
f <- vector(length=1000)
for (i in 1:1000){
sind <- sample(c(1:1000),m)
sample1 <- pop[sind]
sind <- sample(c(1:1000),n)
sample2 <- pop[sind]
f[i] <- var(sample1)/var(sample2)
}
hist(f, prob=T, nclass=50)
n <- 2
f <- vector(length=1000)
for (i in 1:1000){
sind <- sample(c(1:1000),m)
sample1 <- pop[sind]
sind <- sample(c(1:1000),n)
sample2 <- pop[sind]
f[i] <- var(sample1)/var(sample2)
}
hist(f, prob=T, nclass=50)
x <- seq(0,30,0.1)
points(x, df(x,m-1,n-1))
m <- 10
n <- 2
f <- vector(length=1000)
for (i in 1:1000){
sind <- sample(c(1:1000),m)
sample1 <- pop[sind]
sind <- sample(c(1:1000),n)
sample2 <- pop[sind]
f[i] <- var(sample1)/var(sample2)
}
hist(f, prob=T, nclass=50)
x <- seq(0,30,0.1)
points(x, df(x,m-1,n-1))
m <- 10
n <- 5
f <- vector(length=1000)
for (i in 1:1000){
sind <- sample(c(1:1000),m)
sample1 <- pop[sind]
sind <- sample(c(1:1000),n)
sample2 <- pop[sind]
f[i] <- var(sample1)/var(sample2)
}
hist(f, prob=T, nclass=50)
x <- seq(0,30,0.1)
points(x, df(x,m-1,n-1))
pop <- runif(1000)
hist(pop)
m <- 10
n <- 5
f <- vector(length=1000)
for (i in 1:1000){
sind <- sample(c(1:1000),m)
sample1 <- pop[sind]
sind <- sample(c(1:1000),n)
sample2 <- pop[sind]
f[i] <- var(sample1)/var(sample2)
}
hist(f, prob=T, nclass=50)
x <- seq(0,30,0.1)
points(x, df(x,m-1,n-1))
m <- 10
n <- 5
f <- vector(length=1000)
for (i in 1:1000){
sind <- sample(c(1:1000),m)
sample1 <- pop[sind]
sind <- sample(c(1:1000),n)
sample2 <- pop[sind]
f[i] <- var(sample1)/var(sample2)
}
hist(f, prob=T, nclass=50)
x <- seq(0,30,0.1)
points(x, df(x,m-1,n-1))
m <- 10
n <- 3
f <- vector(length=1000)
for (i in 1:1000){
sind <- sample(c(1:1000),m)
sample1 <- pop[sind]
sind <- sample(c(1:1000),n)
sample2 <- pop[sind]
f[i] <- var(sample1)/var(sample2)
}
hist(f, prob=T, nclass=50)
x <- seq(0,30,0.1)
points(x, df(x,m-1,n-1))
x <- seq(0,100,0.1)
points(x, df(x,m-1,n-1))
x <- seq(0,1000,0.1)
points(x, df(x,m-1,n-1))
x <- seq(0,100,0.1)
points(x, df(x,m-1,n-1))
max(f)
m<-max(f)
hist(f, prob=T, nclass=50, xlim=c(0,30))
pop <- runif(1000)
hist(pop)
m <- 10
n <- 3
f <- vector(length=1000)
for (i in 1:1000){
sind <- sample(c(1:1000),m)
sample1 <- pop[sind]
sind <- sample(c(1:1000),n)
sample2 <- pop[sind]
f[i] <- var(sample1)/var(sample2)
}
hist(f, prob=T, nclass=50, xlim=c(0,30))
x<- seq(0,30,0.01)
points(x, df(x,m-1,n-1))
hist(f, prob=T, xlim=c(0,30))
hist(f, prob=T, nclass=500, xlim=c(0,30))
?hist
hist(f, prob=T, nclass=5000, xlim=c(0,30))
x<- seq(0,30,0.01)
points(x, df(x,m-1,n-1))
pop <- runif(1000,34,23)
hist(pop)
pop <- runif(1000,34,235)
hist(pop)
m <- 10
n <- 3
f <- vector(length=1000)
for (i in 1:1000){
sind <- sample(c(1:1000),m)
sample1 <- pop[sind]
sind <- sample(c(1:1000),n)
sample2 <- pop[sind]
f[i] <- var(sample1)/var(sample2)
}
hist(f, prob=T, nclass=5000, xlim=c(0,30))
x<- seq(0,30,0.01)
points(x, df(x,m-1,n-1))
m <- 10
n <- 3
f <- vector(length=1000)
for (i in 1:1000){
sind <- sample(c(1:1000),m)
sample1 <- pop[sind]
sind <- sample(c(1:1000),n)
sample2 <- pop[sind]
f[i] <- var(sample1)/var(sample2)
}
hist(f, prob=T, nclass=50)
x <- seq(0,30,0.1)
points(x, df(x,m-1,n-1))
hist(f, prob=T, nclass=50, xlim=c(0,30))
hist(f, prob=T, nclass=500, xlim=c(0,30))
hist(f, prob=T, nclass=700, xlim=c(0,30))
x <- seq(0,30,0.1)
points(x, df(x,m-1,n-1))
x <- seq(.1,5,by=.005)
m <- c(1,5,10,30)
n <- c(1,5,10,30)
par(mfrow=c(4,4))
for (i in 1:4){
for (j in 1:4) {
plot(x,df(x,m[i],n[j]),type='l',ylab="f(x)",cex=.6)
title(paste(paste("dof =",m[i]),n[j],sep=","))
}
}
par(mfrow=c(4,4))
for (i in 1:4){
for (j in 1:4) {
plot(x,df(x,m[i],n[j]),type='l',ylab="f(x)",cex=.6)
title(paste(paste("dof =",m[i]),n[j],sep=","))
}
}
par(mfrow=c(2,8))
for (i in 1:4){
for (j in 1:4) {
plot(x,df(x,m[i],n[j]),type='l',ylab="f(x)",cex=.6)
title(paste(paste("dof =",m[i]),n[j],sep=","))
}
}
for (i in 1:4){
for (j in 1:4) {
plot(x,df(x,m[i],n[j]),type='l',ylab="f(x)",cex=.6)
title(paste(paste("dof =",m[i]),n[j],sep=","))
}
}
for (i in 1:4){
for (j in 1:4) {
plot(x,df(x,m[i],n[j]),type='l',ylab="f(x)",cex=.6)
title(paste(paste("dof =",m[i]),n[j],sep=","))
}
}
par(mfrow=c(2,8))
for (i in 1:4){
for (j in 1:4) {
plot(x,df(x,m[i],n[j]),type='l',ylab="f(x)",cex=.6)
title(paste(paste("dof =",m[i]),n[j],sep=","))
}
}
par(mfrow=c(1,1))
for (j in 1:4) {
plot(x,df(x,m[i],n[j]),type='l',ylab="f(x)",cex=.6)
title(paste(paste("dof =",m[i]),n[j],sep=","))
}
par(mfrow=c(1,4))
for (i in 1:4){
for (j in 1:4) {
plot(x,df(x,m[i],n[j]),type='l',ylab="f(x)",cex=.6)
title(paste(paste("dof =",m[i]),n[j],sep=","))
}
}
par(mfrow=c(4,4))
for (i in 1:4){
for (j in 1:4) {
plot(x,df(x,m[i],n[j]),type='l',ylab="f(x)",cex=.6)
title(paste(paste("dof =",m[i]),n[j],sep=","))
}
}
par(mfrow=c(1,4))
for (i in 1:4){
for (j in 1:4) {
plot(x,df(x,m[i],n[j]),type='l',ylab="f(x)",cex=.6)
title(paste(paste("dof =",m[i]),n[j],sep=","))
}
}
?chisq.test
count <- c(315,101,108,32)
prob <- c(9/16,3/16,3/16,1/16)
chisq.test(count,p=prob)
data(iris)
head(iris)
summary(iris)
par(mar=c(7,5,1,1)) # more space to labels
boxplot(iris,las=2)
irisVer <- subset(iris, Species == "versicolor")
irisSet <- subset(iris, Species == "setosa")
irisVir <- subset(iris, Species == "virginica")
par(mfrow=c(1,3),mar=c(6,3,2,1))
boxplot(irisVer[,1:4], main="Versicolor",ylim = c(0,8),las=2)
boxplot(irisSet[,1:4], main="Setosa",ylim = c(0,8),las=2)
boxplot(irisVir[,1:4], main="Virginica",ylim = c(0,8),las=2)
par(mfrow=c(1,1))
hist(iris$Petal.Length)
par(mfrow=c(1,3))
hist(irisVer$Petal.Length,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,40))
hist(irisSet$Petal.Length,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,40))
hist(irisVir$Petal.Length,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,40))
library(vioplot)
par(mfrow=c(1,1))
vioplot(iris$Sepal.Length,iris$Sepal.Width,iris$Petal.Length,iris$Petal.Width,
names=c("Sep.Len","Sep.Wid","Pet.Len","Pet.Wid"),
col="gray")
pairs(iris[,1:4])
pairs(iris[,1:4],col=iris[,5],oma=c(4,4,6,12))
par(xpd=T)
legend(0.85,0.6, as.vector(unique(iris$Species)),fill=c(1,2,3))
if (!require("MASS")) install.packages("MASS")
library(MASS)
par(mfrow=c(1,1))
parcoord(iris[,1:4], col=iris[,5],var.label=TRUE,oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.85,0.6, as.vector(unique(iris$Species)),fill=c(1,2,3))
library(dplyr)
my_data <- ToothGrowth
my_data
head(my_data)
str(my_data)
my_data$dose <- factor(my_data$dose,
levels = c(0.5, 1, 2),
labels = c("D0.5", "D1", "D2"))
str(my_data)
# Verificando a frequência de cada célula
table(my_data$supp, my_data$dose)
# Verificando a frequência de cada célula
table(my_data$supp, my_data$dose, my_data$len)
# Verificando a frequência de cada célula
table(my_data$supp, my_data$dose)
# Visualizando os dados
if(!require(ggpubr)) install.packages("ggpubr")
ggboxplot(my_data, x = "dose", y = "len", color = "supp",
palette = c("#00AFBB", "#E7B800"))
library("ggpubr")
ggboxplot(my_data, x = "dose", y = "len", color = "supp",
palette = c("#00AFBB", "#E7B800"))
ggline(my_data, x = "dose", y = "len", color = "supp",
add = c("mean_se", "dotplot"),
palette = c("#00AFBB", "#E7B800"))
# Realizando o ANOVA de dois fatores:
res.aov2 <- aov(len ~ supp + dose, data = my_data)
summary(res.aov2)
res.aov3 <- aov(len ~ supp * dose, data = my_data)
summary(res.aov3)
# Teste de Tukey para encontrar as médias diferentes
TukeyHSD(res.aov3, which = "dose")
TukeyHSD(res.aov3, which = "supp")
leveneTest(len ~ supp*dose, data = my_data)
# Teste de homogeneidade
library(car)
leveneTest(len ~ supp*dose, data = my_data)
# Teste de homogeneidade
library(car)
# Teste de homogeneidade
if(!require(car)) install.packages("car")
my_anova <- aov(len ~ supp * dose, data = my_data)
Anova(my_anova, type = "III")
# Teste ANOVA com dois fatores para desenhos não balanceados
library(car)
Anova(my_anova, type = "III")
setwd("~/GitHub/IMD0601/aula31")
my_data <- read.csv('growth2.csv')
my_data
my_anova <- aov(Growth ~ Species * Fertilizer, data = my_data)
summary(my_anova)
ggboxplot(my_data, x = "Fertilizer", y = "Growth", color = "Species",
palette = c("#00AFBB", "#E7B800"))
ggline(my_data, x = "Fertilizer", y = "Growth", color = "Species",
add = c("mean_se", "dotplot"),
palette = c("#00AFBB", "#E7B800"))
TukeyHSD(my_anova, which = "Fertilizer")
TukeyHSD(my_anova, which = "Species")
leveneTest(Growth ~ Species*Fertilizer, data = my_data)
plot(my_anova, 2)
aov_residuals <- residuals(object = my_anova)
# Executar o teste Shapiro-Wilk
shapiro.test(x = aov_residuals )
?friedman.test
friedman.test(Growth ~ Species*Fertilizer, my_anova)
friedman.test(Growth ~ Species|Fertilizer, my_anova)
friedman.test(Growth ~ Species*Fertilizer, data=my_anova)
friedman.test(Growth ~ Species|Fertilizer, data=my_anova)
friedman.test(Growth,Species,Fertilizer, data=my_anova)
attach(my_anova)
friedman.test(Growth~Species|Fertilizer, data=my_data)
head(my_data)
friedman.test(Growth,Species,Fertilizer)
attach(my_data)
friedman.test(Growth,Species,Fertilizer)
friedman.test(Growth,Fertilizer,Species)
table(Growth,Fertilizer)
table(Species,Fertilizer)
friedman.test(Growth,Fertilizer,Species)
survey
rank(Growth)
Growth
rGrowth <- rank(Growth)
library(nlme)

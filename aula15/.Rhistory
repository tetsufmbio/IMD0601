# fun??o densidade de probabilidade
x<-seq(-10,10,length=100)
plot(x,dnorm(x,0,1),xlab="x", ylab="f(x)", type='l', main="Normal PDF")
# fun??o cumulativa de probabilidade
plot(x,pnorm(x,0,1),xlab="x",ylab="f(x)", type='l', main="Normal CDF scale
1")
plot(x,dnorm(x,3,14),xlab="x", ylab="f(x)", type='l', main="Normal PDF")
plot(x,dnorm(x,3,3),xlab="x", ylab="f(x)", type='l', main="Normal PDF")
plot(x,dnorm(x,3,3),xlab="x", ylab="f(x)", main="Normal PDF")
# gr?ficos usando o ggplot
# Fun??o densidade de probabilidade
ggplot(data = data.frame(x = c(-3, 3)), aes(x)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 0, sd = 1)) +
ylab("") +
scale_y_continuous()
# Fun??o cumulativa de probabilidade
library(ggplot2)
ggplot(data = data.frame(x = c(-3, 3)), aes(x)) +
stat_function(fun = pnorm, n = 101, args = list(mean = 0, sd = 1)) +
ylab("") +
scale_y_continuous()
# gr?ficos usando o ggplot
# Fun??o densidade de probabilidade
ggplot(data = data.frame(x = c(-3, 3)), aes(x)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 0, sd = 1)) +
ylab("") +
scale_y_continuous()
# Exerc?cio
# 1) Gere 100 amostras de dados que segue uma distribui??o normal usando
# a fun??o rnorm e gere uma figura qqplot para verificar se os dados
# seguem uma normal. Repita o procedimento mais 4 vezes, e compare os
# gr?ficos gerados.
data<-rnorm(100, 0, 1)
data
qqnorm(data)
qqline(data)
# Exerc?cio
# 1) Gere 100 amostras de dados que segue uma distribui??o normal usando
# a fun??o rnorm e gere uma figura qqplot para verificar se os dados
# seguem uma normal. Repita o procedimento mais 4 vezes, e compare os
# gr?ficos gerados.
par(mfrow=c(2,2))
data<-rnorm(100, 0, 1)
qqnorm(data)
qqline(data)
data<-rnorm(100, 0, 1)
qqnorm(data)
qqline(data)
data<-rnorm(100, 0, 1)
qqnorm(data)
qqline(data)
data<-rnorm(100, 0, 1)
qqnorm(data)
qqline(data)
pnorm(0,0,1)
pnorm(2,0,1)
pnorm(-2,0,1)
pnorm(2,0,1) - pnorm(-2,0,1)
pnorm(58,34,12) - pnorm(10,34,12)
x<-seq(0,30,length=100)
par(mfrow=c(1,1))
plot(x,dgamma(x,shape=1,scale=1), type='l',xlab="x", ylab="Prob")
lines(x,dgamma(x,shape=2,scale=1), type='l',xlab="x", ylab="Prob", lty=2)
lines(x,dgamma(x,shape=5,scale=1), type='l',xlab="x", ylab="Prob", lty=3)
lines(x,dgamma(x,shape=10,scale=1), type='l',xlab="x", ylab="Prob", lty=4)
legend(x=6,y=.9,paste("Shape=",c(1,2,5,10)),lty=1:4)
x <- seq(0,30,length=100)
plot(x,dgamma(x,shape=2,scale=1), type='l',xlab="x", ylab="f(x)", main="Gamma pdf's")
lines(x,dgamma(x,shape=2,scale=2),lty=2)
lines(x,dgamma(x,shape=2,scale=4),lty=3)
lines(x,dgamma(x,shape=2,scale=8),lty=4)
legend(x=20,y=.3,paste("Scale=",c(1,2,4,8)),lty=1:4)
data<-rgamma(100,shape=2,scale=1)
# Exerc?cio
# 1) Gere 100 amostras de dados que segue uma distribui??o gama usando
# a fun??o rgamma e gere uma figura qqplot para verificar se os dados
# seguem uma normal. Repita o procedimento mais 4 vezes, e compare os
# gr?ficos gerados.
par(mfrow=c(2,2))
qqnorm(data)
qqline(data)
data<-rgamma(100,shape=2,scale=1)
qqnorm(data)
qqline(data)
data<-rgamma(100,shape=2,scale=1)
qqnorm(data)
qqline(data)
data<-rgamma(100,shape=2,scale=1)
qqnorm(data)
qqline(data)
# 2) Verifique se os dados abaixo no vetor data segue uma distribui??o normal
data<-c(4.75, 3.4, 1.8, 2.9, 2.2, 2.4, 5.8, 2.6, 2.4, 5.25)
par(mfrow=c(1,1))
qqnorm(data)
qqline(data)
# 3) Calcule os par?metros alfa e beta da distribui??o gama para os dados
# do exerc?cio 2
beta<- var(data)/mean(data)
alfa<-mean(data)/beta
alfa
beta
# 4) Verifique os dados em um gr?fico qqplot de uma distribui??o gamma com
# os par?metros definidos no exerc?cio anterior.
qqplot(qgamma(ppoints(100),alfa,beta), data)
qqline(data, distribution=function(p) qgamma(p,alfa,beta))
# Distribui??o beta
# alterando os valores de shape1
x <- seq(0,1,length=100)
plot(x,dbeta(x,2,8), type='l',xlab="x", ylab="f(x)", main="Beta pdf's")
lines(x,dbeta(x,2,4),lty=2)
lines(x,dbeta(x,2,2),lty=3)
lines(x,dbeta(x,2,1),lty=4)
legend(x=20,y=.3,paste("Scale=",c(1,2,4,8)),lty=1:4)
# alterando os valores de shape2
x <- seq(0,1,length=100)
plot(x,dbeta(x,8,2), type='l',xlab="x", ylab="f(x)", main="Beta pdf's")
lines(x,dbeta(x,4,2),lty=2)
lines(x,dbeta(x,2,2),lty=3)
lines(x,dbeta(x,1,2),lty=4)
legend(x=20,y=.3,paste("Scale=",c(1,2,4,8)),lty=1:4)
